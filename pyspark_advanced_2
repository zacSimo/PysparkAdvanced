{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9944016,"sourceType":"datasetVersion","datasetId":6114421}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install pyspark","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:04:23.157877Z","iopub.execute_input":"2024-11-20T13:04:23.158866Z","iopub.status.idle":"2024-11-20T13:05:09.151522Z","shell.execute_reply.started":"2024-11-20T13:04:23.158823Z","shell.execute_reply":"2024-11-20T13:05:09.150133Z"}},"outputs":[{"name":"stdout","text":"Collecting pyspark\n  Downloading pyspark-3.5.3.tar.gz (317.3 MB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m317.3/317.3 MB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hRequirement already satisfied: py4j==0.10.9.7 in /opt/conda/lib/python3.10/site-packages (from pyspark) (0.10.9.7)\nBuilding wheels for collected packages: pyspark\n  Building wheel for pyspark (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for pyspark: filename=pyspark-3.5.3-py2.py3-none-any.whl size=317840629 sha256=57c38a37f27c45ecb173c26d077255a0d638614ac0a82bfa81f2cdca8bdf0d8f\n  Stored in directory: /root/.cache/pip/wheels/1b/3a/92/28b93e2fbfdbb07509ca4d6f50c5e407f48dce4ddbda69a4ab\nSuccessfully built pyspark\nInstalling collected packages: pyspark\nSuccessfully installed pyspark-3.5.3\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"from pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName(\"pyspark_practice_2\").getOrCreate()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:05:09.154385Z","iopub.execute_input":"2024-11-20T13:05:09.154774Z","iopub.status.idle":"2024-11-20T13:05:15.219142Z","shell.execute_reply.started":"2024-11-20T13:05:09.154739Z","shell.execute_reply":"2024-11-20T13:05:15.217946Z"}},"outputs":[{"name":"stderr","text":"Setting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n24/11/20 13:05:13 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"spark.sparkContext.setLogLevel(\"ERROR\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:05:15.220785Z","iopub.execute_input":"2024-11-20T13:05:15.221377Z","iopub.status.idle":"2024-11-20T13:05:15.229032Z","shell.execute_reply.started":"2024-11-20T13:05:15.221334Z","shell.execute_reply":"2024-11-20T13:05:15.227932Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"df = spark.read.text(\"/kaggle/input/kddcup/kddcup.data\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:05:15.231673Z","iopub.execute_input":"2024-11-20T13:05:15.232106Z","iopub.status.idle":"2024-11-20T13:05:17.777856Z","shell.execute_reply.started":"2024-11-20T13:05:15.232073Z","shell.execute_reply":"2024-11-20T13:05:17.776567Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"df.show(2,truncate=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:05:17.779838Z","iopub.execute_input":"2024-11-20T13:05:17.780262Z","iopub.status.idle":"2024-11-20T13:05:21.566035Z","shell.execute_reply.started":"2024-11-20T13:05:17.780228Z","shell.execute_reply":"2024-11-20T13:05:21.564866Z"}},"outputs":[{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"name":"stdout","text":"+--------------------------------------------------------------------------------------------------------------------------------------------------+\n|value                                                                                                                                             |\n+--------------------------------------------------------------------------------------------------------------------------------------------------+\n|0,tcp,http,SF,215,45076,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0,0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,normal.|\n|0,tcp,http,SF,162,4528,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,0.00,0.00,0.00,0.00,1.00,0.00,0.00,1,1,1.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,normal. |\n+--------------------------------------------------------------------------------------------------------------------------------------------------+\nonly showing top 2 rows\n\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"import pyspark.sql.functions as f\n\nsplit_col = f.split(df['value'], ',')\ncols = [\"duration\",\n        \"protocol_type\",\n        \"service\",\n        \"flag\",\n        \"src_bytes\",\n        \"dst_bytes\",\n        \"land\",\n        \"wrong_fragment\",\n        \"urgent\",\n        \"hot\",\n        \"num_failed_logins\",\n        \"logged_in\",\n        \"num_compromised\",\n        \"root_shell\",\n        \"su_attempted\",\n        \"num_root\",\n        \"num_file_creations\",\n        \"num_shells\",\n        \"num_access_files\",\n        \"num_outbound_cmds\",\n        \"is_host_login\",\n        \"is_guest_login\",\n        \"count\",\n        \"srv_count\",\n        \"serror_rate\",\n        \"srv_serror_rate\",\n        \"rerror_rate\",\n        \"srv_rerror_rate\",\n        \"same_srv_rate\",\n        \"diff_srv_rate\",\n        \"srv_diff_host_rate\",\n        \"dst_host_count\",\n        \"dst_host_srv_count\",\n        \"dst_host_same_srv_rate\",\n        \"dst_host_diff_srv_rate\",\n        \"dst_host_same_src_port_rate\",\n        \"dst_host_srv_diff_host_rate\",\n        \"dst_host_serror_rate\",\n        \"dst_host_srv_serror_rate\",\n        \"dst_host_rerror_rate\",\n        \"dst_host_srv_rerror_rate\",\n        \"label\"\n       ]\n\ndf_f = (df.withColumn(cols[0], split_col[0]).withColumn(cols[1], split_col[1]).withColumn(cols[2], split_col[2]).withColumn(cols[3], split_col[3])\n        .withColumn(cols[4], split_col[4]).withColumn(cols[5], split_col[5]).withColumn(cols[6], split_col[6]).withColumn(cols[7], split_col[7])\n        .withColumn(cols[8], split_col[8]).withColumn(cols[9], split_col[9]).withColumn(cols[10], split_col[10]).withColumn(cols[11], split_col[11])\n        .withColumn(cols[12], split_col[12])\n        .withColumn(cols[13], split_col[13]).withColumn(cols[14], split_col[14]).withColumn(cols[15], split_col[15]).withColumn(cols[16], split_col[16])\n        .withColumn(cols[17], split_col[17]).withColumn(cols[18], split_col[18]).withColumn(cols[19], split_col[19]).withColumn(cols[20], split_col[20])\n        .withColumn(cols[21], split_col[21]).withColumn(cols[22], split_col[22]).withColumn(cols[23], split_col[23]).withColumn(cols[24], split_col[24])\n        .withColumn(cols[26], split_col[26]).withColumn(cols[27], split_col[27]).withColumn(cols[28], split_col[28]).withColumn(cols[29], split_col[29])\n        .withColumn(cols[30], split_col[30]).withColumn(cols[31], split_col[31]).withColumn(cols[32], split_col[32]).withColumn(cols[33], split_col[33])\n        .withColumn(cols[34], split_col[34]).withColumn(cols[35], split_col[35]).withColumn(cols[36], split_col[36]).withColumn(cols[37], split_col[37])\n        .withColumn(cols[38] , split_col[38]).withColumn(cols[39], split_col[39]).withColumn(cols[40], split_col[40]).withColumn(cols[41], split_col[41])\n        .drop(\"value\")\n       )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:05:21.567467Z","iopub.execute_input":"2024-11-20T13:05:21.567909Z","iopub.status.idle":"2024-11-20T13:05:22.617513Z","shell.execute_reply.started":"2024-11-20T13:05:21.567858Z","shell.execute_reply":"2024-11-20T13:05:22.616301Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"df_f.show(1,vertical=True,truncate=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:05:22.618930Z","iopub.execute_input":"2024-11-20T13:05:22.619357Z","iopub.status.idle":"2024-11-20T13:05:23.353374Z","shell.execute_reply.started":"2024-11-20T13:05:22.619313Z","shell.execute_reply":"2024-11-20T13:05:23.349886Z"}},"outputs":[{"name":"stdout","text":"-RECORD 0------------------------------\n duration                    | 0       \n protocol_type               | tcp     \n service                     | http    \n flag                        | SF      \n src_bytes                   | 215     \n dst_bytes                   | 45076   \n land                        | 0       \n wrong_fragment              | 0       \n urgent                      | 0       \n hot                         | 0       \n num_failed_logins           | 0       \n logged_in                   | 1       \n num_compromised             | 0       \n root_shell                  | 0       \n su_attempted                | 0       \n num_root                    | 0       \n num_file_creations          | 0       \n num_shells                  | 0       \n num_access_files            | 0       \n num_outbound_cmds           | 0       \n is_host_login               | 0       \n is_guest_login              | 0       \n count                       | 1       \n srv_count                   | 1       \n serror_rate                 | 0.00    \n rerror_rate                 | 0.00    \n srv_rerror_rate             | 0.00    \n same_srv_rate               | 1.00    \n diff_srv_rate               | 0.00    \n srv_diff_host_rate          | 0.00    \n dst_host_count              | 0       \n dst_host_srv_count          | 0       \n dst_host_same_srv_rate      | 0.00    \n dst_host_diff_srv_rate      | 0.00    \n dst_host_same_src_port_rate | 0.00    \n dst_host_srv_diff_host_rate | 0.00    \n dst_host_serror_rate        | 0.00    \n dst_host_srv_serror_rate    | 0.00    \n dst_host_rerror_rate        | 0.00    \n dst_host_srv_rerror_rate    | 0.00    \n label                       | normal. \nonly showing top 1 row\n\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"df_f.printSchema()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:05:23.355829Z","iopub.execute_input":"2024-11-20T13:05:23.356322Z","iopub.status.idle":"2024-11-20T13:05:23.368026Z","shell.execute_reply.started":"2024-11-20T13:05:23.356262Z","shell.execute_reply":"2024-11-20T13:05:23.366990Z"}},"outputs":[{"name":"stdout","text":"root\n |-- duration: string (nullable = true)\n |-- protocol_type: string (nullable = true)\n |-- service: string (nullable = true)\n |-- flag: string (nullable = true)\n |-- src_bytes: string (nullable = true)\n |-- dst_bytes: string (nullable = true)\n |-- land: string (nullable = true)\n |-- wrong_fragment: string (nullable = true)\n |-- urgent: string (nullable = true)\n |-- hot: string (nullable = true)\n |-- num_failed_logins: string (nullable = true)\n |-- logged_in: string (nullable = true)\n |-- num_compromised: string (nullable = true)\n |-- root_shell: string (nullable = true)\n |-- su_attempted: string (nullable = true)\n |-- num_root: string (nullable = true)\n |-- num_file_creations: string (nullable = true)\n |-- num_shells: string (nullable = true)\n |-- num_access_files: string (nullable = true)\n |-- num_outbound_cmds: string (nullable = true)\n |-- is_host_login: string (nullable = true)\n |-- is_guest_login: string (nullable = true)\n |-- count: string (nullable = true)\n |-- srv_count: string (nullable = true)\n |-- serror_rate: string (nullable = true)\n |-- rerror_rate: string (nullable = true)\n |-- srv_rerror_rate: string (nullable = true)\n |-- same_srv_rate: string (nullable = true)\n |-- diff_srv_rate: string (nullable = true)\n |-- srv_diff_host_rate: string (nullable = true)\n |-- dst_host_count: string (nullable = true)\n |-- dst_host_srv_count: string (nullable = true)\n |-- dst_host_same_srv_rate: string (nullable = true)\n |-- dst_host_diff_srv_rate: string (nullable = true)\n |-- dst_host_same_src_port_rate: string (nullable = true)\n |-- dst_host_srv_diff_host_rate: string (nullable = true)\n |-- dst_host_serror_rate: string (nullable = true)\n |-- dst_host_srv_serror_rate: string (nullable = true)\n |-- dst_host_rerror_rate: string (nullable = true)\n |-- dst_host_srv_rerror_rate: string (nullable = true)\n |-- label: string (nullable = true)\n\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"df_f.rdd.getNumPartitions()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:05:23.369872Z","iopub.execute_input":"2024-11-20T13:05:23.370612Z","iopub.status.idle":"2024-11-20T13:05:23.620021Z","shell.execute_reply.started":"2024-11-20T13:05:23.370553Z","shell.execute_reply":"2024-11-20T13:05:23.618988Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"6"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"df_f = df_f.repartition(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:05:23.625613Z","iopub.execute_input":"2024-11-20T13:05:23.626102Z","iopub.status.idle":"2024-11-20T13:05:23.643375Z","shell.execute_reply.started":"2024-11-20T13:05:23.626035Z","shell.execute_reply":"2024-11-20T13:05:23.641909Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"df_f.rdd.getNumPartitions()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:05:23.645003Z","iopub.execute_input":"2024-11-20T13:05:23.645450Z","iopub.status.idle":"2024-11-20T13:05:50.026637Z","shell.execute_reply.started":"2024-11-20T13:05:23.645405Z","shell.execute_reply":"2024-11-20T13:05:50.025582Z"}},"outputs":[{"name":"stderr","text":"[Stage 2:=================================================>         (5 + 1) / 6]\r","output_type":"stream"},{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"10"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"df_f.createOrReplaceTempView(\"df_KDDCup\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:05:50.028594Z","iopub.execute_input":"2024-11-20T13:05:50.029032Z","iopub.status.idle":"2024-11-20T13:05:50.141224Z","shell.execute_reply.started":"2024-11-20T13:05:50.028984Z","shell.execute_reply":"2024-11-20T13:05:50.140095Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# Q1: Count the number of connections for each label\n%time\ndf_f.groupBy(df_f.label).count().orderBy(\"count\", ascending=False).show(50,truncate=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:05:50.144689Z","iopub.execute_input":"2024-11-20T13:05:50.145170Z","iopub.status.idle":"2024-11-20T13:06:03.398370Z","shell.execute_reply.started":"2024-11-20T13:05:50.145121Z","shell.execute_reply":"2024-11-20T13:06:03.395620Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 5 µs, sys: 1 µs, total: 6 µs\nWall time: 10.5 µs\n","output_type":"stream"},{"name":"stderr","text":"[Stage 5:==============================================>           (8 + 2) / 10]\r","output_type":"stream"},{"name":"stdout","text":"+----------------+-------+\n|label           |count  |\n+----------------+-------+\n|smurf.          |2807886|\n|neptune.        |1072017|\n|normal.         |972781 |\n|satan.          |15892  |\n|ipsweep.        |12481  |\n|portsweep.      |10413  |\n|nmap.           |2316   |\n|back.           |2203   |\n|warezclient.    |1020   |\n|teardrop.       |979    |\n|pod.            |264    |\n|guess_passwd.   |53     |\n|buffer_overflow.|30     |\n|land.           |21     |\n|warezmaster.    |20     |\n|imap.           |12     |\n|rootkit.        |10     |\n|loadmodule.     |9      |\n|ftp_write.      |8      |\n|multihop.       |7      |\n|phf.            |4      |\n|perl.           |3      |\n|spy.            |2      |\n+----------------+-------+\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"# Q3: Get the list of protocols that are normal and vulnerable to attacks, \n# where there is NOT guest login to the destination addresses\n# 1. Only for 'normal.' protocols\ndf_f.select(df_f.protocol_type, ).where((df_f.label == \"normal.\") & (df_f.is_guest_login != \"1\")).distinct().show(50)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:06:03.399588Z","iopub.execute_input":"2024-11-20T13:06:03.400015Z","iopub.status.idle":"2024-11-20T13:06:14.620918Z","shell.execute_reply.started":"2024-11-20T13:06:03.399967Z","shell.execute_reply":"2024-11-20T13:06:14.615192Z"}},"outputs":[{"name":"stderr","text":"[Stage 9:=================================================>         (5 + 1) / 6]\r","output_type":"stream"},{"name":"stdout","text":"+-------------+\n|protocol_type|\n+-------------+\n|          tcp|\n|          udp|\n|         icmp|\n+-------------+\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"# 2. For both 'normal.' and 'attacks' : v1 - using DF\n%time\ndf_f = df_f.withColumn(\"attack_or_not\",f.when(df_f.label == \"normal.\",\"no_attack\").otherwise(\"attack\"))\ndf_f.select(df_f.protocol_type, df_f.attack_or_not).where(df_f.is_guest_login != \"1\").groupBy(df_f.protocol_type, df_f.attack_or_not).count().orderBy(\"count\",ascending=False).show(50)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:06:14.622148Z","iopub.execute_input":"2024-11-20T13:06:14.622566Z","iopub.status.idle":"2024-11-20T13:06:33.787329Z","shell.execute_reply.started":"2024-11-20T13:06:14.622523Z","shell.execute_reply":"2024-11-20T13:06:33.783557Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 3 µs, sys: 1 µs, total: 4 µs\nWall time: 9.3 µs\n","output_type":"stream"},{"name":"stderr","text":"[Stage 17:=============================================>           (8 + 2) / 10]\r","output_type":"stream"},{"name":"stdout","text":"+-------------+-------------+-------+\n|protocol_type|attack_or_not|  count|\n+-------------+-------------+-------+\n|         icmp|       attack|2820782|\n|          tcp|       attack|1101613|\n|          tcp|    no_attack| 764894|\n|          udp|    no_attack| 191348|\n|         icmp|    no_attack|  12763|\n|          udp|       attack|   2940|\n+-------------+-------------+-------+\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"# 2. For both 'normal.' and 'attacks' : v2 - using SQL\n%time\nquery = \"\"\"select protocol_type,\n            case label\n                when 'normal.' then 'no_attack'\n                else 'attack'\n            end as State,\n            count(*) as freq\n            from df_KDDCup\n            where is_guest_login != '1'\n            group by protocol_type, State\n            order by freq desc       \n\"\"\"\nspark.sql(query).show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:06:33.790581Z","iopub.execute_input":"2024-11-20T13:06:33.791038Z","iopub.status.idle":"2024-11-20T13:06:52.294539Z","shell.execute_reply.started":"2024-11-20T13:06:33.790993Z","shell.execute_reply":"2024-11-20T13:06:52.291123Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 4 µs, sys: 1 µs, total: 5 µs\nWall time: 9.3 µs\n","output_type":"stream"},{"name":"stderr","text":"[Stage 23:============================>                            (5 + 4) / 10]\r","output_type":"stream"},{"name":"stdout","text":"+-------------+---------+-------+\n|protocol_type|    State|   freq|\n+-------------+---------+-------+\n|         icmp|   attack|2820782|\n|          tcp|   attack|1101613|\n|          tcp|no_attack| 764894|\n|          udp|no_attack| 191348|\n|         icmp|no_attack|  12763|\n|          udp|   attack|   2940|\n+-------------+---------+-------+\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"df_f.drop(\"attack_or_not\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:06:52.295748Z","iopub.execute_input":"2024-11-20T13:06:52.296210Z","iopub.status.idle":"2024-11-20T13:06:52.337972Z","shell.execute_reply.started":"2024-11-20T13:06:52.296159Z","shell.execute_reply":"2024-11-20T13:06:52.336945Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"DataFrame[duration: string, protocol_type: string, service: string, flag: string, src_bytes: string, dst_bytes: string, land: string, wrong_fragment: string, urgent: string, hot: string, num_failed_logins: string, logged_in: string, num_compromised: string, root_shell: string, su_attempted: string, num_root: string, num_file_creations: string, num_shells: string, num_access_files: string, num_outbound_cmds: string, is_host_login: string, is_guest_login: string, count: string, srv_count: string, serror_rate: string, rerror_rate: string, srv_rerror_rate: string, same_srv_rate: string, diff_srv_rate: string, srv_diff_host_rate: string, dst_host_count: string, dst_host_srv_count: string, dst_host_same_srv_rate: string, dst_host_diff_srv_rate: string, dst_host_same_src_port_rate: string, dst_host_srv_diff_host_rate: string, dst_host_serror_rate: string, dst_host_srv_serror_rate: string, dst_host_rerror_rate: string, dst_host_srv_rerror_rate: string, label: string]"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"# 2. For both 'normal.' and 'attacks' : v3 - using RDD\nrdd = spark.sparkContext.textFile(\"/kaggle/input/kddcup/kddcup.data\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:06:52.339809Z","iopub.execute_input":"2024-11-20T13:06:52.340275Z","iopub.status.idle":"2024-11-20T13:06:52.383160Z","shell.execute_reply.started":"2024-11-20T13:06:52.340217Z","shell.execute_reply":"2024-11-20T13:06:52.381940Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"%time\ndef attack_or_not(label):\n    if label == \"normal.\":\n        return \"no_attack\"\n    else:\n        return \"attack\"\n        \nrdd.filter(lambda x: x.split(',')[21] != '1').map(lambda x: ((x.split(',')[1], attack_or_not(x.split(',')[-1])), 1)).reduceByKey(lambda x,y: x+y).sortBy(lambda x: x[1], ascending=False).collect()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:06:52.384495Z","iopub.execute_input":"2024-11-20T13:06:52.384958Z","iopub.status.idle":"2024-11-20T13:07:21.696269Z","shell.execute_reply.started":"2024-11-20T13:06:52.384910Z","shell.execute_reply":"2024-11-20T13:07:21.695227Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 3 µs, sys: 1 µs, total: 4 µs\nWall time: 7.39 µs\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"[(('icmp', 'attack'), 2820782),\n (('tcp', 'attack'), 1101613),\n (('tcp', 'no_attack'), 764894),\n (('udp', 'no_attack'), 191348),\n (('icmp', 'no_attack'), 12763),\n (('udp', 'attack'), 2940)]"},"metadata":{}}],"execution_count":19},{"cell_type":"code","source":"# Q3: Apply some descriptive statistics on Numerical data\n# 1. Retrieved statistics about 'src_bytes'\nsummary = df_f.select(f.round(f.mean(df_f.src_bytes),3).alias(\"average\"), f.round(f.variance(df_f.src_bytes), 3).alias(\"variance\"), f.round(f.sqrt(f.variance(df_f.src_bytes)),3).alias(\"ecart-type\"), f.round(f.min(df_f.src_bytes),3).alias(\"min\"), f.round(f.max(df_f.src_bytes),3).alias(\"max\"))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:26:15.106046Z","iopub.execute_input":"2024-11-20T13:26:15.106480Z","iopub.status.idle":"2024-11-20T13:26:15.159316Z","shell.execute_reply.started":"2024-11-20T13:26:15.106449Z","shell.execute_reply":"2024-11-20T13:26:15.158116Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"summary.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T13:26:20.134015Z","iopub.execute_input":"2024-11-20T13:26:20.134446Z","iopub.status.idle":"2024-11-20T13:26:31.837190Z","shell.execute_reply.started":"2024-11-20T13:26:20.134410Z","shell.execute_reply":"2024-11-20T13:26:31.836005Z"}},"outputs":[{"name":"stderr","text":"[Stage 60:=============================================>           (8 + 2) / 10]\r","output_type":"stream"},{"name":"stdout","text":"+--------+-------------------+----------+---+-----+\n| average|           variance|ecart-type|min|  max|\n+--------+-------------------+----------+---+-----+\n|1834.621|8.86292468017535E11|941431.074|0.0|999.0|\n+--------+-------------------+----------+---+-----+\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":33},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}