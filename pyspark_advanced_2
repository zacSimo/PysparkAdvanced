{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9944016,"sourceType":"datasetVersion","datasetId":6114421}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install pyspark","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:33:19.298159Z","iopub.execute_input":"2024-11-20T14:33:19.298646Z","iopub.status.idle":"2024-11-20T14:34:05.519365Z","shell.execute_reply.started":"2024-11-20T14:33:19.298604Z","shell.execute_reply":"2024-11-20T14:34:05.518100Z"}},"outputs":[{"name":"stdout","text":"Collecting pyspark\n  Downloading pyspark-3.5.3.tar.gz (317.3 MB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m317.3/317.3 MB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hRequirement already satisfied: py4j==0.10.9.7 in /opt/conda/lib/python3.10/site-packages (from pyspark) (0.10.9.7)\nBuilding wheels for collected packages: pyspark\n  Building wheel for pyspark (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for pyspark: filename=pyspark-3.5.3-py2.py3-none-any.whl size=317840629 sha256=428c7487c1055ef12492359ac516c70143c71d98dabe5e1231f5ce245f7f904c\n  Stored in directory: /root/.cache/pip/wheels/1b/3a/92/28b93e2fbfdbb07509ca4d6f50c5e407f48dce4ddbda69a4ab\nSuccessfully built pyspark\nInstalling collected packages: pyspark\nSuccessfully installed pyspark-3.5.3\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"from pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName(\"pyspark_practice_2\").getOrCreate()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:34:05.522233Z","iopub.execute_input":"2024-11-20T14:34:05.522758Z","iopub.status.idle":"2024-11-20T14:34:11.272825Z","shell.execute_reply.started":"2024-11-20T14:34:05.522684Z","shell.execute_reply":"2024-11-20T14:34:11.271511Z"}},"outputs":[{"name":"stderr","text":"Setting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n24/11/20 14:34:09 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"spark.sparkContext.setLogLevel(\"ERROR\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:34:11.274602Z","iopub.execute_input":"2024-11-20T14:34:11.275500Z","iopub.status.idle":"2024-11-20T14:34:11.282915Z","shell.execute_reply.started":"2024-11-20T14:34:11.275445Z","shell.execute_reply":"2024-11-20T14:34:11.281747Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"df = spark.read.text(\"/kaggle/input/kddcup/kddcup.data\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:34:11.285127Z","iopub.execute_input":"2024-11-20T14:34:11.285456Z","iopub.status.idle":"2024-11-20T14:34:13.736001Z","shell.execute_reply.started":"2024-11-20T14:34:11.285423Z","shell.execute_reply":"2024-11-20T14:34:13.734814Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"df.show(2,truncate=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:34:13.737512Z","iopub.execute_input":"2024-11-20T14:34:13.737981Z","iopub.status.idle":"2024-11-20T14:34:17.481646Z","shell.execute_reply.started":"2024-11-20T14:34:13.737934Z","shell.execute_reply":"2024-11-20T14:34:17.480082Z"}},"outputs":[{"name":"stdout","text":"+--------------------------------------------------------------------------------------------------------------------------------------------------+\n|value                                                                                                                                             |\n+--------------------------------------------------------------------------------------------------------------------------------------------------+\n|0,tcp,http,SF,215,45076,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0,0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,normal.|\n|0,tcp,http,SF,162,4528,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,0.00,0.00,0.00,0.00,1.00,0.00,0.00,1,1,1.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,normal. |\n+--------------------------------------------------------------------------------------------------------------------------------------------------+\nonly showing top 2 rows\n\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"import pyspark.sql.functions as f\n\nsplit_col = f.split(df['value'], ',')\ncols = [\"duration\",\n        \"protocol_type\",\n        \"service\",\n        \"flag\",\n        \"src_bytes\",\n        \"dst_bytes\",\n        \"land\",\n        \"wrong_fragment\",\n        \"urgent\",\n        \"hot\",\n        \"num_failed_logins\",\n        \"logged_in\",\n        \"num_compromised\",\n        \"root_shell\",\n        \"su_attempted\",\n        \"num_root\",\n        \"num_file_creations\",\n        \"num_shells\",\n        \"num_access_files\",\n        \"num_outbound_cmds\",\n        \"is_host_login\",\n        \"is_guest_login\",\n        \"count\",\n        \"srv_count\",\n        \"serror_rate\",\n        \"srv_serror_rate\",\n        \"rerror_rate\",\n        \"srv_rerror_rate\",\n        \"same_srv_rate\",\n        \"diff_srv_rate\",\n        \"srv_diff_host_rate\",\n        \"dst_host_count\",\n        \"dst_host_srv_count\",\n        \"dst_host_same_srv_rate\",\n        \"dst_host_diff_srv_rate\",\n        \"dst_host_same_src_port_rate\",\n        \"dst_host_srv_diff_host_rate\",\n        \"dst_host_serror_rate\",\n        \"dst_host_srv_serror_rate\",\n        \"dst_host_rerror_rate\",\n        \"dst_host_srv_rerror_rate\",\n        \"label\"\n       ]\n\ndf_f = (df.withColumn(cols[0], split_col[0]).withColumn(cols[1], split_col[1]).withColumn(cols[2], split_col[2]).withColumn(cols[3], split_col[3])\n        .withColumn(cols[4], split_col[4]).withColumn(cols[5], split_col[5]).withColumn(cols[6], split_col[6]).withColumn(cols[7], split_col[7])\n        .withColumn(cols[8], split_col[8]).withColumn(cols[9], split_col[9]).withColumn(cols[10], split_col[10]).withColumn(cols[11], split_col[11])\n        .withColumn(cols[12], split_col[12])\n        .withColumn(cols[13], split_col[13]).withColumn(cols[14], split_col[14]).withColumn(cols[15], split_col[15]).withColumn(cols[16], split_col[16])\n        .withColumn(cols[17], split_col[17]).withColumn(cols[18], split_col[18]).withColumn(cols[19], split_col[19]).withColumn(cols[20], split_col[20])\n        .withColumn(cols[21], split_col[21]).withColumn(cols[22], split_col[22]).withColumn(cols[23], split_col[23]).withColumn(cols[24], split_col[24])\n        .withColumn(cols[26], split_col[26]).withColumn(cols[27], split_col[27]).withColumn(cols[28], split_col[28]).withColumn(cols[29], split_col[29])\n        .withColumn(cols[30], split_col[30]).withColumn(cols[31], split_col[31]).withColumn(cols[32], split_col[32]).withColumn(cols[33], split_col[33])\n        .withColumn(cols[34], split_col[34]).withColumn(cols[35], split_col[35]).withColumn(cols[36], split_col[36]).withColumn(cols[37], split_col[37])\n        .withColumn(cols[38] , split_col[38]).withColumn(cols[39], split_col[39]).withColumn(cols[40], split_col[40]).withColumn(cols[41], split_col[41])\n        .drop(\"value\")\n       )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:34:17.483555Z","iopub.execute_input":"2024-11-20T14:34:17.483975Z","iopub.status.idle":"2024-11-20T14:34:18.560389Z","shell.execute_reply.started":"2024-11-20T14:34:17.483928Z","shell.execute_reply":"2024-11-20T14:34:18.559378Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"df_f.show(1,vertical=True,truncate=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:34:18.562576Z","iopub.execute_input":"2024-11-20T14:34:18.563165Z","iopub.status.idle":"2024-11-20T14:34:19.309404Z","shell.execute_reply.started":"2024-11-20T14:34:18.563102Z","shell.execute_reply":"2024-11-20T14:34:19.308420Z"}},"outputs":[{"name":"stdout","text":"-RECORD 0------------------------------\n duration                    | 0       \n protocol_type               | tcp     \n service                     | http    \n flag                        | SF      \n src_bytes                   | 215     \n dst_bytes                   | 45076   \n land                        | 0       \n wrong_fragment              | 0       \n urgent                      | 0       \n hot                         | 0       \n num_failed_logins           | 0       \n logged_in                   | 1       \n num_compromised             | 0       \n root_shell                  | 0       \n su_attempted                | 0       \n num_root                    | 0       \n num_file_creations          | 0       \n num_shells                  | 0       \n num_access_files            | 0       \n num_outbound_cmds           | 0       \n is_host_login               | 0       \n is_guest_login              | 0       \n count                       | 1       \n srv_count                   | 1       \n serror_rate                 | 0.00    \n rerror_rate                 | 0.00    \n srv_rerror_rate             | 0.00    \n same_srv_rate               | 1.00    \n diff_srv_rate               | 0.00    \n srv_diff_host_rate          | 0.00    \n dst_host_count              | 0       \n dst_host_srv_count          | 0       \n dst_host_same_srv_rate      | 0.00    \n dst_host_diff_srv_rate      | 0.00    \n dst_host_same_src_port_rate | 0.00    \n dst_host_srv_diff_host_rate | 0.00    \n dst_host_serror_rate        | 0.00    \n dst_host_srv_serror_rate    | 0.00    \n dst_host_rerror_rate        | 0.00    \n dst_host_srv_rerror_rate    | 0.00    \n label                       | normal. \nonly showing top 1 row\n\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"df_f.printSchema()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:34:19.310566Z","iopub.execute_input":"2024-11-20T14:34:19.310998Z","iopub.status.idle":"2024-11-20T14:34:19.322795Z","shell.execute_reply.started":"2024-11-20T14:34:19.310953Z","shell.execute_reply":"2024-11-20T14:34:19.321118Z"}},"outputs":[{"name":"stdout","text":"root\n |-- duration: string (nullable = true)\n |-- protocol_type: string (nullable = true)\n |-- service: string (nullable = true)\n |-- flag: string (nullable = true)\n |-- src_bytes: string (nullable = true)\n |-- dst_bytes: string (nullable = true)\n |-- land: string (nullable = true)\n |-- wrong_fragment: string (nullable = true)\n |-- urgent: string (nullable = true)\n |-- hot: string (nullable = true)\n |-- num_failed_logins: string (nullable = true)\n |-- logged_in: string (nullable = true)\n |-- num_compromised: string (nullable = true)\n |-- root_shell: string (nullable = true)\n |-- su_attempted: string (nullable = true)\n |-- num_root: string (nullable = true)\n |-- num_file_creations: string (nullable = true)\n |-- num_shells: string (nullable = true)\n |-- num_access_files: string (nullable = true)\n |-- num_outbound_cmds: string (nullable = true)\n |-- is_host_login: string (nullable = true)\n |-- is_guest_login: string (nullable = true)\n |-- count: string (nullable = true)\n |-- srv_count: string (nullable = true)\n |-- serror_rate: string (nullable = true)\n |-- rerror_rate: string (nullable = true)\n |-- srv_rerror_rate: string (nullable = true)\n |-- same_srv_rate: string (nullable = true)\n |-- diff_srv_rate: string (nullable = true)\n |-- srv_diff_host_rate: string (nullable = true)\n |-- dst_host_count: string (nullable = true)\n |-- dst_host_srv_count: string (nullable = true)\n |-- dst_host_same_srv_rate: string (nullable = true)\n |-- dst_host_diff_srv_rate: string (nullable = true)\n |-- dst_host_same_src_port_rate: string (nullable = true)\n |-- dst_host_srv_diff_host_rate: string (nullable = true)\n |-- dst_host_serror_rate: string (nullable = true)\n |-- dst_host_srv_serror_rate: string (nullable = true)\n |-- dst_host_rerror_rate: string (nullable = true)\n |-- dst_host_srv_rerror_rate: string (nullable = true)\n |-- label: string (nullable = true)\n\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"df_f.rdd.getNumPartitions()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:34:19.323981Z","iopub.execute_input":"2024-11-20T14:34:19.324408Z","iopub.status.idle":"2024-11-20T14:34:19.715365Z","shell.execute_reply.started":"2024-11-20T14:34:19.324359Z","shell.execute_reply":"2024-11-20T14:34:19.713910Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"6"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"df_f = df_f.repartition(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:34:19.720042Z","iopub.execute_input":"2024-11-20T14:34:19.720549Z","iopub.status.idle":"2024-11-20T14:34:19.736849Z","shell.execute_reply.started":"2024-11-20T14:34:19.720495Z","shell.execute_reply":"2024-11-20T14:34:19.735700Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"df_f.rdd.getNumPartitions()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:34:19.738128Z","iopub.execute_input":"2024-11-20T14:34:19.738559Z","iopub.status.idle":"2024-11-20T14:34:47.439982Z","shell.execute_reply.started":"2024-11-20T14:34:19.738513Z","shell.execute_reply":"2024-11-20T14:34:47.436709Z"}},"outputs":[{"name":"stderr","text":"[Stage 2:=================================================>         (5 + 1) / 6]\r","output_type":"stream"},{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"10"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"df_f.createOrReplaceTempView(\"df_KDDCup\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:34:47.441496Z","iopub.execute_input":"2024-11-20T14:34:47.442001Z","iopub.status.idle":"2024-11-20T14:34:47.574410Z","shell.execute_reply.started":"2024-11-20T14:34:47.441937Z","shell.execute_reply":"2024-11-20T14:34:47.573263Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# Q1: Count the number of connections for each label\n%time\ndf_f.groupBy(df_f.label).count().orderBy(\"count\", ascending=False).show(50,truncate=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:34:47.578073Z","iopub.execute_input":"2024-11-20T14:34:47.578559Z","iopub.status.idle":"2024-11-20T14:35:01.245866Z","shell.execute_reply.started":"2024-11-20T14:34:47.578508Z","shell.execute_reply":"2024-11-20T14:35:01.242903Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 5 µs, sys: 0 ns, total: 5 µs\nWall time: 9.78 µs\n","output_type":"stream"},{"name":"stderr","text":"[Stage 5:==============================================>           (8 + 2) / 10]\r","output_type":"stream"},{"name":"stdout","text":"+----------------+-------+\n|label           |count  |\n+----------------+-------+\n|smurf.          |2807886|\n|neptune.        |1072017|\n|normal.         |972781 |\n|satan.          |15892  |\n|ipsweep.        |12481  |\n|portsweep.      |10413  |\n|nmap.           |2316   |\n|back.           |2203   |\n|warezclient.    |1020   |\n|teardrop.       |979    |\n|pod.            |264    |\n|guess_passwd.   |53     |\n|buffer_overflow.|30     |\n|land.           |21     |\n|warezmaster.    |20     |\n|imap.           |12     |\n|rootkit.        |10     |\n|loadmodule.     |9      |\n|ftp_write.      |8      |\n|multihop.       |7      |\n|phf.            |4      |\n|perl.           |3      |\n|spy.            |2      |\n+----------------+-------+\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"# Q3: Get the list of protocols that are normal and vulnerable to attacks, \n# where there is NOT guest login to the destination addresses\n# 1. Only for 'normal.' protocols\ndf_f.select(df_f.protocol_type, ).where((df_f.label == \"normal.\") & (df_f.is_guest_login != \"1\")).distinct().show(50)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:35:01.248021Z","iopub.execute_input":"2024-11-20T14:35:01.249473Z","iopub.status.idle":"2024-11-20T14:35:13.335315Z","shell.execute_reply.started":"2024-11-20T14:35:01.249411Z","shell.execute_reply":"2024-11-20T14:35:13.331780Z"}},"outputs":[{"name":"stderr","text":"[Stage 9:=================================================>         (5 + 1) / 6]\r","output_type":"stream"},{"name":"stdout","text":"+-------------+\n|protocol_type|\n+-------------+\n|          tcp|\n|          udp|\n|         icmp|\n+-------------+\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"# 2. For both 'normal.' and 'attacks' : v1 - using DF\n%time\ndf_f = df_f.withColumn(\"attack_or_not\",f.when(df_f.label == \"normal.\",\"no_attack\").otherwise(\"attack\"))\ndf_f.select(df_f.protocol_type, df_f.attack_or_not).where(df_f.is_guest_login != \"1\").groupBy(df_f.protocol_type, df_f.attack_or_not).count().orderBy(\"count\",ascending=False).show(50)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:35:13.336518Z","iopub.execute_input":"2024-11-20T14:35:13.336963Z","iopub.status.idle":"2024-11-20T14:35:32.713418Z","shell.execute_reply.started":"2024-11-20T14:35:13.336915Z","shell.execute_reply":"2024-11-20T14:35:32.711766Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 5 µs, sys: 1 µs, total: 6 µs\nWall time: 10.3 µs\n","output_type":"stream"},{"name":"stderr","text":"[Stage 17:=============================================>           (8 + 2) / 10]\r","output_type":"stream"},{"name":"stdout","text":"+-------------+-------------+-------+\n|protocol_type|attack_or_not|  count|\n+-------------+-------------+-------+\n|         icmp|       attack|2820782|\n|          tcp|       attack|1101613|\n|          tcp|    no_attack| 764894|\n|          udp|    no_attack| 191348|\n|         icmp|    no_attack|  12763|\n|          udp|       attack|   2940|\n+-------------+-------------+-------+\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"# 2. For both 'normal.' and 'attacks' : v2 - using SQL\n%time\nquery = \"\"\"select protocol_type,\n            case label\n                when 'normal.' then 'no_attack'\n                else 'attack'\n            end as State,\n            count(*) as freq\n            from df_KDDCup\n            where is_guest_login != '1'\n            group by protocol_type, State\n            order by freq desc       \n\"\"\"\nspark.sql(query).show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:35:32.715540Z","iopub.execute_input":"2024-11-20T14:35:32.716031Z","iopub.status.idle":"2024-11-20T14:35:51.901436Z","shell.execute_reply.started":"2024-11-20T14:35:32.715981Z","shell.execute_reply":"2024-11-20T14:35:51.900309Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 4 µs, sys: 1e+03 ns, total: 5 µs\nWall time: 9.78 µs\n","output_type":"stream"},{"name":"stderr","text":"[Stage 23:=============================================>           (8 + 2) / 10]\r","output_type":"stream"},{"name":"stdout","text":"+-------------+---------+-------+\n|protocol_type|    State|   freq|\n+-------------+---------+-------+\n|         icmp|   attack|2820782|\n|          tcp|   attack|1101613|\n|          tcp|no_attack| 764894|\n|          udp|no_attack| 191348|\n|         icmp|no_attack|  12763|\n|          udp|   attack|   2940|\n+-------------+---------+-------+\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"df_f.drop(\"attack_or_not\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:35:51.903337Z","iopub.execute_input":"2024-11-20T14:35:51.904099Z","iopub.status.idle":"2024-11-20T14:35:51.942734Z","shell.execute_reply.started":"2024-11-20T14:35:51.904044Z","shell.execute_reply":"2024-11-20T14:35:51.941653Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"DataFrame[duration: string, protocol_type: string, service: string, flag: string, src_bytes: string, dst_bytes: string, land: string, wrong_fragment: string, urgent: string, hot: string, num_failed_logins: string, logged_in: string, num_compromised: string, root_shell: string, su_attempted: string, num_root: string, num_file_creations: string, num_shells: string, num_access_files: string, num_outbound_cmds: string, is_host_login: string, is_guest_login: string, count: string, srv_count: string, serror_rate: string, rerror_rate: string, srv_rerror_rate: string, same_srv_rate: string, diff_srv_rate: string, srv_diff_host_rate: string, dst_host_count: string, dst_host_srv_count: string, dst_host_same_srv_rate: string, dst_host_diff_srv_rate: string, dst_host_same_src_port_rate: string, dst_host_srv_diff_host_rate: string, dst_host_serror_rate: string, dst_host_srv_serror_rate: string, dst_host_rerror_rate: string, dst_host_srv_rerror_rate: string, label: string]"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"# 2. For both 'normal.' and 'attacks' : v3 - using RDD\nrdd = spark.sparkContext.textFile(\"/kaggle/input/kddcup/kddcup.data\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:35:51.944469Z","iopub.execute_input":"2024-11-20T14:35:51.945602Z","iopub.status.idle":"2024-11-20T14:35:51.997136Z","shell.execute_reply.started":"2024-11-20T14:35:51.945545Z","shell.execute_reply":"2024-11-20T14:35:51.996084Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"%time\ndef attack_or_not(label):\n    if label == \"normal.\":\n        return \"no_attack\"\n    else:\n        return \"attack\"\n        \nrdd.filter(lambda x: x.split(',')[21] != '1').map(lambda x: ((x.split(',')[1], attack_or_not(x.split(',')[-1])), 1)).reduceByKey(lambda x,y: x+y).sortBy(lambda x: x[1], ascending=False).collect()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:35:51.998382Z","iopub.execute_input":"2024-11-20T14:35:51.999637Z","iopub.status.idle":"2024-11-20T14:36:21.621833Z","shell.execute_reply.started":"2024-11-20T14:35:51.999586Z","shell.execute_reply":"2024-11-20T14:36:21.620778Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 4 µs, sys: 1 µs, total: 5 µs\nWall time: 9.78 µs\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"[(('icmp', 'attack'), 2820782),\n (('tcp', 'attack'), 1101613),\n (('tcp', 'no_attack'), 764894),\n (('udp', 'no_attack'), 191348),\n (('icmp', 'no_attack'), 12763),\n (('udp', 'attack'), 2940)]"},"metadata":{}}],"execution_count":19},{"cell_type":"code","source":"# Q3: Apply some descriptive statistics on Numerical data\n# 1. Retrieved statistics about 'src_bytes'\nsummary = df_f.select(f.round(f.mean(df_f.src_bytes),3).alias(\"average\"), \n                      f.round(f.variance(df_f.src_bytes), 3).alias(\"variance\"), \n                      f.round(f.sqrt(f.variance(df_f.src_bytes)),3).alias(\"ecart-type\"), \n                      f.round(f.min(df_f.src_bytes),3).alias(\"min\"), \n                      f.round(f.max(df_f.src_bytes),3).alias(\"max\"),\n                      f.round(f.std(df_f.src_bytes),3).alias(\"stdev\"),\n                      f.round(f.last(df_f.src_bytes),3).alias(\"last\"),\n                      f.round(f.skewness(df_f.src_bytes),3).alias(\"skewness\"), # asymetrie de la distribution\n                     )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:36:21.623290Z","iopub.execute_input":"2024-11-20T14:36:21.623937Z","iopub.status.idle":"2024-11-20T14:36:21.738830Z","shell.execute_reply.started":"2024-11-20T14:36:21.623872Z","shell.execute_reply":"2024-11-20T14:36:21.737657Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"summary.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:36:21.740125Z","iopub.execute_input":"2024-11-20T14:36:21.740570Z","iopub.status.idle":"2024-11-20T14:36:35.588376Z","shell.execute_reply.started":"2024-11-20T14:36:21.740519Z","shell.execute_reply":"2024-11-20T14:36:35.585653Z"}},"outputs":[{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"name":"stdout","text":"+--------+-------------------+----------+---+-----+----------+------+--------+\n| average|           variance|ecart-type|min|  max|     stdev|  last|skewness|\n+--------+-------------------+----------+---+-----+----------+------+--------+\n|1834.621|8.86292468017535E11|941431.074|0.0|999.0|941431.074|2304.0|1188.952|\n+--------+-------------------+----------+---+-----+----------+------+--------+\n\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"%time\ngroups = df_f.groupBy(df_f.protocol_type)\ngroups.agg({'src_bytes': 'mean', 'dst_bytes': 'std'}).show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:36:35.591270Z","iopub.execute_input":"2024-11-20T14:36:35.591768Z","iopub.status.idle":"2024-11-20T14:36:50.569601Z","shell.execute_reply.started":"2024-11-20T14:36:35.591690Z","shell.execute_reply":"2024-11-20T14:36:50.566801Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 4 µs, sys: 1 µs, total: 5 µs\nWall time: 9.54 µs\n","output_type":"stream"},{"name":"stderr","text":"[Stage 42:=============================================>           (8 + 2) / 10]\r","output_type":"stream"},{"name":"stdout","text":"+-------------+-----------------+------------------+\n|protocol_type|   avg(src_bytes)| stddev(dst_bytes)|\n+-------------+-----------------+------------------+\n|          tcp|3388.569965326596|1043771.3100418139|\n|          udp|97.22772893848308| 55.43318653434132|\n|         icmp|927.8916893855577|               0.0|\n+-------------+-----------------+------------------+\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"%time\ngroups.agg(\n    f.round(f.mean(df_f.src_bytes),3).alias(\"average_src_bytes\"), \n    f.round(f.variance(df_f.dst_bytes), 3).alias(\"variance_dst_bytes\"), \n    f.round(f.sqrt(f.variance(df_f.rerror_rate)),3).alias(\"ecart-type_rerror_rate\"), \n    f.round(f.min(df_f.serror_rate),3).alias(\"serror_rate_min\"), \n    f.round(f.max(df_f.same_srv_rate),3).alias(\"max_same_srv_rate\"),\n    f.round(f.std(df_f.diff_srv_rate),3).alias(\"stdev_diff_srv_rate\"),\n    f.round(f.last(df_f.dst_host_serror_rate),3).alias(\"last_dst_host_serror_rate\"),\n    f.round(f.skewness(df_f.dst_host_rerror_rate),3).alias(\"skewness_dst_host_rerror_rate\"), # asymetrie de la distribution\n).show(vertical=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:40:50.371481Z","iopub.execute_input":"2024-11-20T14:40:50.371969Z","iopub.status.idle":"2024-11-20T14:41:14.076148Z","shell.execute_reply.started":"2024-11-20T14:40:50.371928Z","shell.execute_reply":"2024-11-20T14:41:14.075044Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 3 µs, sys: 1 µs, total: 4 µs\nWall time: 8.11 µs\n","output_type":"stream"},{"name":"stderr","text":"[Stage 72:=============================================>           (8 + 2) / 10]\r","output_type":"stream"},{"name":"stdout","text":"-RECORD 0---------------------------------------------\n protocol_type                 | icmp                 \n average_src_bytes             | 927.892              \n variance_dst_bytes            | 0.0                  \n ecart-type_rerror_rate        | 0.001                \n serror_rate_min               | 0.0                  \n max_same_srv_rate             | 1.0                  \n stdev_diff_srv_rate           | 0.024                \n last_dst_host_serror_rate     | 0.0                  \n skewness_dst_host_rerror_rate | 136.842              \n-RECORD 1---------------------------------------------\n protocol_type                 | tcp                  \n average_src_bytes             | 3388.57              \n variance_dst_bytes            | 1.089458547666417E12 \n ecart-type_rerror_rate        | 0.357                \n serror_rate_min               | 0.0                  \n max_same_srv_rate             | 1.0                  \n stdev_diff_srv_rate           | 0.109                \n last_dst_host_serror_rate     | 0.0                  \n skewness_dst_host_rerror_rate | 1.947                \n-RECORD 2---------------------------------------------\n protocol_type                 | udp                  \n average_src_bytes             | 97.228               \n variance_dst_bytes            | 3072.838             \n ecart-type_rerror_rate        | 0.003                \n serror_rate_min               | 0.0                  \n max_same_srv_rate             | 1.0                  \n stdev_diff_srv_rate           | 0.185                \n last_dst_host_serror_rate     | 0.0                  \n skewness_dst_host_rerror_rate | 12.685               \n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"# Q4: A descriptive stats based on 'Protocols' and 'Labels' \n# V1 - with distinct label types\n%time\ngrp_by_proto_label = df_f.groupBy(df_f.protocol_type, df_f.label)\ngrp_by_proto_label.agg(\n    f.round(f.mean(df_f.src_bytes), 3).alias(\"avg_src_bytes\"),\n    f.round(f.sqrt(f.variance(df_f.dst_bytes)), 3).alias(\"ecart_type_dst_bytes\"),\n    f.round(f.stddev(df_f.serror_rate), 3).alias(\"stddev_serror_rate\")\n).show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T14:37:37.999279Z","iopub.execute_input":"2024-11-20T14:37:37.999831Z","iopub.status.idle":"2024-11-20T14:37:54.566226Z","shell.execute_reply.started":"2024-11-20T14:37:37.999773Z","shell.execute_reply":"2024-11-20T14:37:54.565301Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 3 µs, sys: 1 µs, total: 4 µs\nWall time: 7.15 µs\n","output_type":"stream"},{"name":"stderr","text":"[Stage 60:=============================================>           (8 + 2) / 10]\r","output_type":"stream"},{"name":"stdout","text":"+-------------+----------------+-------------+--------------------+------------------+\n|protocol_type|           label|avg_src_bytes|ecart_type_dst_bytes|stddev_serror_rate|\n+-------------+----------------+-------------+--------------------+------------------+\n|         icmp|          satan.|       21.378|                 0.0|               0.0|\n|          tcp|           back.|    54156.356|             616.232|             0.034|\n|         icmp|         normal.|       90.676|                 0.0|             0.009|\n|         icmp|        ipsweep.|       10.915|                 0.0|             0.009|\n|          udp|       teardrop.|         28.0|               1.265|             0.214|\n|          tcp|        neptune.|         0.01|                0.85|             0.393|\n|          tcp|buffer_overflow.|     1400.433|           12440.665|             0.251|\n|          tcp|          satan.|        0.935|             153.726|             0.083|\n|          tcp|       multihop.|      435.143|          382586.005|               0.0|\n|          tcp|   guess_passwd.|       125.34|             257.502|             0.166|\n|         icmp|           nmap.|          8.0|                 0.0|             0.016|\n|          tcp|    warezclient.|   300219.563|            1104.408|             0.047|\n|          udp|         normal.|       98.316|              54.768|             0.003|\n|          tcp|      ftp_write.|       220.75|           13793.738|               0.0|\n|          tcp|           land.|          0.0|                 0.0|             0.146|\n|          tcp|    warezmaster.|         49.3|         2197498.959|               0.0|\n|          tcp|        rootkit.|      415.286|            8523.013|               0.0|\n|          tcp|           perl.|      265.667|             166.135|               0.0|\n|          tcp|           nmap.|          0.0|                 0.0|             0.053|\n|         icmp|          smurf.|      935.773|                 0.0|               0.0|\n+-------------+----------------+-------------+--------------------+------------------+\nonly showing top 20 rows\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"# Q4: A descriptive stats based on 'Protocols' and 'Labels' \n# V1 - with two differents label types \"attack\" and \"no_attack\"\n%time\ndf_f = df_f.withColumn(\"attack_or_not\",f.when(df_f.label == \"normal.\",\"no_attack\").otherwise(\"attack\"))\ngrp_by_proto_attack = df_f.groupBy(df_f.protocol_type, df_f.attack_or_not)\ngrp_by_proto_attack.agg(\n    f.round(f.mean(df_f.src_bytes), 3).alias(\"avg_src_bytes\"),\n    f.round(f.mean(df_f.dst_bytes), 3).alias(\"avg_dst_bytes\"),\n    f.round(f.sqrt(f.variance(df_f.dst_bytes)), 3).alias(\"ecart_type_dst_bytes\"),\n    f.round(f.stddev(df_f.serror_rate), 3).alias(\"stddev_serror_rate\"),\n    f.round(f.skewness(df_f.dst_host_rerror_rate),3).alias(\"skewness_dst_host_rerror_rate\")\n).where(f.col(\"avg_dst_bytes\").cast('int') > (f.col(\"avg_src_bytes\").cast('int') * 2)).show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T15:09:19.741160Z","iopub.execute_input":"2024-11-20T15:09:19.741737Z","iopub.status.idle":"2024-11-20T15:09:38.486771Z","shell.execute_reply.started":"2024-11-20T15:09:19.741677Z","shell.execute_reply":"2024-11-20T15:09:38.485443Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 4 µs, sys: 0 ns, total: 4 µs\nWall time: 7.87 µs\n","output_type":"stream"},{"name":"stderr","text":"[Stage 114:============================================>           (8 + 2) / 10]\r","output_type":"stream"},{"name":"stdout","text":"+-------------+-------------+-------------+-------------+--------------------+------------------+-----------------------------+\n|protocol_type|attack_or_not|avg_src_bytes|avg_dst_bytes|ecart_type_dst_bytes|stddev_serror_rate|skewness_dst_host_rerror_rate|\n+-------------+-------------+-------------+-------------+--------------------+------------------+-----------------------------+\n|          tcp|    no_attack|     1844.291|     4071.316|           38465.968|             0.031|                        3.312|\n+-------------+-------------+-------------+-------------+--------------------+------------------+-----------------------------+\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":41},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}