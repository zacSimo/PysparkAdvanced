{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9944016,"sourceType":"datasetVersion","datasetId":6114421}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install pyspark","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-20T09:00:43.275163Z","iopub.execute_input":"2024-11-20T09:00:43.275614Z","iopub.status.idle":"2024-11-20T09:01:37.179786Z","shell.execute_reply.started":"2024-11-20T09:00:43.275526Z","shell.execute_reply":"2024-11-20T09:01:37.177684Z"}},"outputs":[{"name":"stdout","text":"Collecting pyspark\n  Downloading pyspark-3.5.3.tar.gz (317.3 MB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m317.3/317.3 MB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hRequirement already satisfied: py4j==0.10.9.7 in /opt/conda/lib/python3.10/site-packages (from pyspark) (0.10.9.7)\nBuilding wheels for collected packages: pyspark\n  Building wheel for pyspark (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for pyspark: filename=pyspark-3.5.3-py2.py3-none-any.whl size=317840629 sha256=4cdcb4e74d5612bec05ef84687e8f52dd43dcc06f43b720bb6cc7948894168ac\n  Stored in directory: /root/.cache/pip/wheels/1b/3a/92/28b93e2fbfdbb07509ca4d6f50c5e407f48dce4ddbda69a4ab\nSuccessfully built pyspark\nInstalling collected packages: pyspark\nSuccessfully installed pyspark-3.5.3\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"from pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName(\"pyspark_practice_2\").getOrCreate()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T09:01:37.183154Z","iopub.execute_input":"2024-11-20T09:01:37.183592Z","iopub.status.idle":"2024-11-20T09:01:47.090799Z","shell.execute_reply.started":"2024-11-20T09:01:37.183525Z","shell.execute_reply":"2024-11-20T09:01:47.088437Z"}},"outputs":[{"name":"stderr","text":"Setting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n24/11/20 09:01:43 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"spark.sparkContext.setLogLevel(\"ERROR\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T09:01:47.093399Z","iopub.execute_input":"2024-11-20T09:01:47.094512Z","iopub.status.idle":"2024-11-20T09:01:47.109782Z","shell.execute_reply.started":"2024-11-20T09:01:47.094464Z","shell.execute_reply":"2024-11-20T09:01:47.107813Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"df = spark.read.text(\"/kaggle/input/kddcup/kddcup.data\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T09:01:47.114679Z","iopub.execute_input":"2024-11-20T09:01:47.115351Z","iopub.status.idle":"2024-11-20T09:01:51.191607Z","shell.execute_reply.started":"2024-11-20T09:01:47.115290Z","shell.execute_reply":"2024-11-20T09:01:51.189502Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"df.show(2,truncate=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T09:01:51.196074Z","iopub.execute_input":"2024-11-20T09:01:51.196497Z","iopub.status.idle":"2024-11-20T09:01:58.208497Z","shell.execute_reply.started":"2024-11-20T09:01:51.196458Z","shell.execute_reply":"2024-11-20T09:01:58.207305Z"}},"outputs":[{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"name":"stdout","text":"+--------------------------------------------------------------------------------------------------------------------------------------------------+\n|value                                                                                                                                             |\n+--------------------------------------------------------------------------------------------------------------------------------------------------+\n|0,tcp,http,SF,215,45076,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0,0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,normal.|\n|0,tcp,http,SF,162,4528,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,0.00,0.00,0.00,0.00,1.00,0.00,0.00,1,1,1.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,normal. |\n+--------------------------------------------------------------------------------------------------------------------------------------------------+\nonly showing top 2 rows\n\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"import pyspark.sql.functions as f\n\nsplit_col = f.split(df['value'], ',')\ncols = [\"duration\",\n        \"protocol_type\",\n        \"service\",\n        \"flag\",\n        \"src_bytes\",\n        \"dst_bytes\",\n        \"land\",\n        \"wrong_fragment\",\n        \"urgent\",\n        \"hot\",\n        \"num_failed_logins\",\n        \"logged_in\",\n        \"num_compromised\",\n        \"root_shell\",\n        \"su_attempted\",\n        \"num_root\",\n        \"num_file_creations\",\n        \"num_shells\",\n        \"num_access_files\",\n        \"num_outbound_cmds\",\n        \"is_host_login\",\n        \"is_guest_login\",\n        \"count\",\n        \"srv_count\",\n        \"serror_rate\",\n        \"srv_serror_rate\",\n        \"rerror_rate\",\n        \"srv_rerror_rate\",\n        \"same_srv_rate\",\n        \"diff_srv_rate\",\n        \"srv_diff_host_rate\",\n        \"dst_host_count\",\n        \"dst_host_srv_count\",\n        \"dst_host_same_srv_rate\",\n        \"dst_host_diff_srv_rate\",\n        \"dst_host_same_src_port_rate\",\n        \"dst_host_srv_diff_host_rate\",\n        \"dst_host_serror_rate\",\n        \"dst_host_srv_serror_rate\",\n        \"dst_host_rerror_rate\",\n        \"dst_host_srv_rerror_rate\",\n        \"label\"\n       ]\n\ndf_f = (df.withColumn(cols[0], split_col[0]).withColumn(cols[1], split_col[1]).withColumn(cols[2], split_col[2]).withColumn(cols[3], split_col[3])\n        .withColumn(cols[4], split_col[4]).withColumn(cols[5], split_col[5]).withColumn(cols[6], split_col[6]).withColumn(cols[7], split_col[7])\n        .withColumn(cols[8], split_col[8]).withColumn(cols[9], split_col[9]).withColumn(cols[10], split_col[10]).withColumn(cols[11], split_col[11])\n        .withColumn(cols[12], split_col[12])\n        .withColumn(cols[13], split_col[13]).withColumn(cols[14], split_col[14]).withColumn(cols[15], split_col[15]).withColumn(cols[16], split_col[16])\n        .withColumn(cols[17], split_col[17]).withColumn(cols[18], split_col[18]).withColumn(cols[19], split_col[19]).withColumn(cols[20], split_col[20])\n        .withColumn(cols[21], split_col[21]).withColumn(cols[22], split_col[22]).withColumn(cols[23], split_col[23]).withColumn(cols[24], split_col[24])\n        .withColumn(cols[26], split_col[26]).withColumn(cols[27], split_col[27]).withColumn(cols[28], split_col[28]).withColumn(cols[29], split_col[29])\n        .withColumn(cols[30], split_col[30]).withColumn(cols[31], split_col[31]).withColumn(cols[32], split_col[32]).withColumn(cols[33], split_col[33])\n        .withColumn(cols[34], split_col[34]).withColumn(cols[35], split_col[35]).withColumn(cols[36], split_col[36]).withColumn(cols[37], split_col[37])\n        .withColumn(cols[38] , split_col[38]).withColumn(cols[39], split_col[39]).withColumn(cols[40], split_col[40]).withColumn(cols[41], split_col[41])\n        .drop(\"value\")\n       )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T09:01:58.210032Z","iopub.execute_input":"2024-11-20T09:01:58.211745Z","iopub.status.idle":"2024-11-20T09:01:59.831852Z","shell.execute_reply.started":"2024-11-20T09:01:58.210515Z","shell.execute_reply":"2024-11-20T09:01:59.830674Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"df_f.show(1,vertical=True,truncate=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T09:01:59.834328Z","iopub.execute_input":"2024-11-20T09:01:59.834886Z","iopub.status.idle":"2024-11-20T09:02:01.118067Z","shell.execute_reply.started":"2024-11-20T09:01:59.834828Z","shell.execute_reply":"2024-11-20T09:02:01.115106Z"}},"outputs":[{"name":"stdout","text":"-RECORD 0------------------------------\n duration                    | 0       \n protocol_type               | tcp     \n service                     | http    \n flag                        | SF      \n src_bytes                   | 215     \n dst_bytes                   | 45076   \n land                        | 0       \n wrong_fragment              | 0       \n urgent                      | 0       \n hot                         | 0       \n num_failed_logins           | 0       \n logged_in                   | 1       \n num_compromised             | 0       \n root_shell                  | 0       \n su_attempted                | 0       \n num_root                    | 0       \n num_file_creations          | 0       \n num_shells                  | 0       \n num_access_files            | 0       \n num_outbound_cmds           | 0       \n is_host_login               | 0       \n is_guest_login              | 0       \n count                       | 1       \n srv_count                   | 1       \n serror_rate                 | 0.00    \n rerror_rate                 | 0.00    \n srv_rerror_rate             | 0.00    \n same_srv_rate               | 1.00    \n diff_srv_rate               | 0.00    \n srv_diff_host_rate          | 0.00    \n dst_host_count              | 0       \n dst_host_srv_count          | 0       \n dst_host_same_srv_rate      | 0.00    \n dst_host_diff_srv_rate      | 0.00    \n dst_host_same_src_port_rate | 0.00    \n dst_host_srv_diff_host_rate | 0.00    \n dst_host_serror_rate        | 0.00    \n dst_host_srv_serror_rate    | 0.00    \n dst_host_rerror_rate        | 0.00    \n dst_host_srv_rerror_rate    | 0.00    \n label                       | normal. \nonly showing top 1 row\n\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"df_f.printSchema()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T09:14:40.313843Z","iopub.execute_input":"2024-11-20T09:14:40.314259Z","iopub.status.idle":"2024-11-20T09:14:40.321284Z","shell.execute_reply.started":"2024-11-20T09:14:40.314222Z","shell.execute_reply":"2024-11-20T09:14:40.320042Z"}},"outputs":[{"name":"stdout","text":"root\n |-- duration: string (nullable = true)\n |-- protocol_type: string (nullable = true)\n |-- service: string (nullable = true)\n |-- flag: string (nullable = true)\n |-- src_bytes: string (nullable = true)\n |-- dst_bytes: string (nullable = true)\n |-- land: string (nullable = true)\n |-- wrong_fragment: string (nullable = true)\n |-- urgent: string (nullable = true)\n |-- hot: string (nullable = true)\n |-- num_failed_logins: string (nullable = true)\n |-- logged_in: string (nullable = true)\n |-- num_compromised: string (nullable = true)\n |-- root_shell: string (nullable = true)\n |-- su_attempted: string (nullable = true)\n |-- num_root: string (nullable = true)\n |-- num_file_creations: string (nullable = true)\n |-- num_shells: string (nullable = true)\n |-- num_access_files: string (nullable = true)\n |-- num_outbound_cmds: string (nullable = true)\n |-- is_host_login: string (nullable = true)\n |-- is_guest_login: string (nullable = true)\n |-- count: string (nullable = true)\n |-- srv_count: string (nullable = true)\n |-- serror_rate: string (nullable = true)\n |-- rerror_rate: string (nullable = true)\n |-- srv_rerror_rate: string (nullable = true)\n |-- same_srv_rate: string (nullable = true)\n |-- diff_srv_rate: string (nullable = true)\n |-- srv_diff_host_rate: string (nullable = true)\n |-- dst_host_count: string (nullable = true)\n |-- dst_host_srv_count: string (nullable = true)\n |-- dst_host_same_srv_rate: string (nullable = true)\n |-- dst_host_diff_srv_rate: string (nullable = true)\n |-- dst_host_same_src_port_rate: string (nullable = true)\n |-- dst_host_srv_diff_host_rate: string (nullable = true)\n |-- dst_host_serror_rate: string (nullable = true)\n |-- dst_host_srv_serror_rate: string (nullable = true)\n |-- dst_host_rerror_rate: string (nullable = true)\n |-- dst_host_srv_rerror_rate: string (nullable = true)\n |-- label: string (nullable = true)\n\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"df_f.rdd.getNumPartitions()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T09:14:56.226837Z","iopub.execute_input":"2024-11-20T09:14:56.227259Z","iopub.status.idle":"2024-11-20T09:14:56.465671Z","shell.execute_reply.started":"2024-11-20T09:14:56.227221Z","shell.execute_reply":"2024-11-20T09:14:56.462955Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"6"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"df_f = df_f.repartition(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T09:15:10.488083Z","iopub.execute_input":"2024-11-20T09:15:10.488524Z","iopub.status.idle":"2024-11-20T09:15:10.506761Z","shell.execute_reply.started":"2024-11-20T09:15:10.488485Z","shell.execute_reply":"2024-11-20T09:15:10.505218Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"df_f.rdd.getNumPartitions()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T09:15:17.321794Z","iopub.execute_input":"2024-11-20T09:15:17.322224Z","iopub.status.idle":"2024-11-20T09:15:42.085556Z","shell.execute_reply.started":"2024-11-20T09:15:17.322185Z","shell.execute_reply":"2024-11-20T09:15:42.084325Z"}},"outputs":[{"name":"stderr","text":"[Stage 3:=================================================>         (5 + 1) / 6]\r","output_type":"stream"},{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"10"},"metadata":{}}],"execution_count":19},{"cell_type":"code","source":"df_f.createOrReplaceTempView(\"df_KDDCup\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T09:15:42.087591Z","iopub.execute_input":"2024-11-20T09:15:42.088105Z","iopub.status.idle":"2024-11-20T09:15:42.227391Z","shell.execute_reply.started":"2024-11-20T09:15:42.088045Z","shell.execute_reply":"2024-11-20T09:15:42.226192Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"# Q1: Count the number of connections for each label\n%time\ndf_f.groupBy(df_f.label).count().orderBy(\"count\", ascending=False).show(50,truncate=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T09:26:49.493930Z","iopub.execute_input":"2024-11-20T09:26:49.494357Z","iopub.status.idle":"2024-11-20T09:27:00.766263Z","shell.execute_reply.started":"2024-11-20T09:26:49.494321Z","shell.execute_reply":"2024-11-20T09:27:00.764975Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 3 µs, sys: 0 ns, total: 3 µs\nWall time: 7.39 µs\n","output_type":"stream"},{"name":"stderr","text":"[Stage 54:========================================================(10 + 0) / 10]\r","output_type":"stream"},{"name":"stdout","text":"+----------------+-------+\n|label           |count  |\n+----------------+-------+\n|smurf.          |2807886|\n|neptune.        |1072017|\n|normal.         |972781 |\n|satan.          |15892  |\n|ipsweep.        |12481  |\n|portsweep.      |10413  |\n|nmap.           |2316   |\n|back.           |2203   |\n|warezclient.    |1020   |\n|teardrop.       |979    |\n|pod.            |264    |\n|guess_passwd.   |53     |\n|buffer_overflow.|30     |\n|land.           |21     |\n|warezmaster.    |20     |\n|imap.           |12     |\n|rootkit.        |10     |\n|loadmodule.     |9      |\n|ftp_write.      |8      |\n|multihop.       |7      |\n|phf.            |4      |\n|perl.           |3      |\n|spy.            |2      |\n+----------------+-------+\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":30},{"cell_type":"code","source":"# Q3: Get the list of protocols that are normal and vulnerable to attacks, \n# where there is NOT guest login to the destination addresses\n# 1. Only for 'normal.' protocols\ndf_f.select(df_f.protocol_type, ).where((df_f.label == \"normal.\") & (df_f.is_guest_login != \"1\")).distinct().show(50)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T09:38:51.909962Z","iopub.execute_input":"2024-11-20T09:38:51.910374Z","iopub.status.idle":"2024-11-20T09:39:03.322210Z","shell.execute_reply.started":"2024-11-20T09:38:51.910340Z","shell.execute_reply":"2024-11-20T09:39:03.320873Z"}},"outputs":[{"name":"stderr","text":"[Stage 58:======================================>                   (4 + 2) / 6]\r","output_type":"stream"},{"name":"stdout","text":"+-------------+\n|protocol_type|\n+-------------+\n|          tcp|\n|          udp|\n|         icmp|\n+-------------+\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"# 2. For both 'normal.' and 'attacks' : v1 - using DF\n%time\ndf_f = df_f.withColumn(\"attack_or_not\",f.when(df_f.label == \"normal.\",\"no_attack\").otherwise(\"attack\"))\ndf_f.select(df_f.protocol_type, df_f.attack_or_not).where(df_f.is_guest_login != \"1\").groupBy(df_f.protocol_type, df_f.attack_or_not).count().orderBy(\"count\",ascending=False).show(50)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T10:27:12.840102Z","iopub.execute_input":"2024-11-20T10:27:12.840562Z","iopub.status.idle":"2024-11-20T10:27:30.801536Z","shell.execute_reply.started":"2024-11-20T10:27:12.840508Z","shell.execute_reply":"2024-11-20T10:27:30.799997Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 3 µs, sys: 0 ns, total: 3 µs\nWall time: 7.39 µs\n","output_type":"stream"},{"name":"stderr","text":"[Stage 82:================================================>         (5 + 1) / 6]\r","output_type":"stream"},{"name":"stdout","text":"+-------------+-------------+-------+\n|protocol_type|attack_or_not|  count|\n+-------------+-------------+-------+\n|         icmp|       attack|2820782|\n|          tcp|       attack|1101613|\n|          tcp|    no_attack| 764894|\n|          udp|    no_attack| 191348|\n|         icmp|    no_attack|  12763|\n|          udp|       attack|   2940|\n+-------------+-------------+-------+\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":48},{"cell_type":"code","source":"# 2. For both 'normal.' and 'attacks' : v2 - using SQL\n%time\nquery = \"\"\"select protocol_type,\n            case label\n                when 'normal.' then 'no_attack'\n                else 'attack'\n            end as State,\n            count(*) as freq\n            from df_KDDCup\n            where is_guest_login != '1'\n            group by protocol_type, State\n            order by freq desc       \n\"\"\"\nspark.sql(query).show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T10:27:30.803390Z","iopub.execute_input":"2024-11-20T10:27:30.803777Z","iopub.status.idle":"2024-11-20T10:27:49.648444Z","shell.execute_reply.started":"2024-11-20T10:27:30.803733Z","shell.execute_reply":"2024-11-20T10:27:49.647425Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 4 µs, sys: 0 ns, total: 4 µs\nWall time: 8.82 µs\n","output_type":"stream"},{"name":"stderr","text":"[Stage 88:================================================>         (5 + 1) / 6]\r","output_type":"stream"},{"name":"stdout","text":"+-------------+---------+-------+\n|protocol_type|    State|   freq|\n+-------------+---------+-------+\n|         icmp|   attack|2820782|\n|          tcp|   attack|1101613|\n|          tcp|no_attack| 764894|\n|          udp|no_attack| 191348|\n|         icmp|no_attack|  12763|\n|          udp|   attack|   2940|\n+-------------+---------+-------+\n\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"}],"execution_count":49},{"cell_type":"code","source":"# 2. For both 'normal.' and 'attacks' : v3 - using RDD\nrdd = spark.sparkContext.textFile(\"/kaggle/input/kddcup/kddcup.data\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T10:43:43.101894Z","iopub.execute_input":"2024-11-20T10:43:43.102403Z","iopub.status.idle":"2024-11-20T10:43:43.147618Z","shell.execute_reply.started":"2024-11-20T10:43:43.102366Z","shell.execute_reply":"2024-11-20T10:43:43.146139Z"}},"outputs":[],"execution_count":50},{"cell_type":"code","source":"%time\ndef attack_or_not(label):\n    if label == \"normal.\":\n        return \"no_attack\"\n    else:\n        return \"attack\"\n        \nrdd.filter(lambda x: x.split(',')[21] != '1').map(lambda x: ((x.split(',')[1], attack_or_not(x.split(',')[-1])), 1)).reduceByKey(lambda x,y: x+y).sortBy(lambda x: x[1], ascending=False).collect()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T10:59:44.886346Z","iopub.execute_input":"2024-11-20T10:59:44.886937Z","iopub.status.idle":"2024-11-20T11:00:14.400241Z","shell.execute_reply.started":"2024-11-20T10:59:44.886880Z","shell.execute_reply":"2024-11-20T11:00:14.399066Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 5 µs, sys: 1e+03 ns, total: 6 µs\nWall time: 11.2 µs\n","output_type":"stream"},{"name":"stderr","text":"                                                                                \r","output_type":"stream"},{"execution_count":53,"output_type":"execute_result","data":{"text/plain":"[(('icmp', 'attack'), 2820782),\n (('tcp', 'attack'), 1101613),\n (('tcp', 'no_attack'), 764894),\n (('udp', 'no_attack'), 191348),\n (('icmp', 'no_attack'), 12763),\n (('udp', 'attack'), 2940)]"},"metadata":{}}],"execution_count":53},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}